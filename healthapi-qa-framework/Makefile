# Health API QA Framework - Makefile
# Automa√ß√£o de comandos para desenvolvimento e CI/CD

.PHONY: help setup dev test-all test-unit test-functional test-integration test-performance test-security test-contracts coverage lint sonar build clean docker-up docker-down

# Configura√ß√µes
PYTHON := python3
PIP := pip3
PYTEST := pytest
DOCKER_COMPOSE := docker-compose
API_PORT := 8000
TEST_WORKERS := 4

# Cores para output
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[1;33m
BLUE := \033[0;34m
NC := \033[0m # No Color

help: ## Mostra esta mensagem de ajuda
	@echo "$(BLUE)Health API QA Framework - Comandos Dispon√≠veis$(NC)"
	@echo "=================================================="
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "$(GREEN)%-20s$(NC) %s\n", $$1, $$2}'

setup: ## Configura ambiente completo de desenvolvimento
	@echo "$(YELLOW)üîß Configurando ambiente de desenvolvimento...$(NC)"
	$(PIP) install --upgrade pip
	$(PIP) install -r requirements.txt
	$(PIP) install -r requirements-dev.txt
	pre-commit install
	@echo "$(GREEN)‚úÖ Ambiente configurado com sucesso!$(NC)"

dev: ## Inicia API em modo desenvolvimento
	@echo "$(YELLOW)üöÄ Iniciando API em modo desenvolvimento...$(NC)"
	cd api && uvicorn main:app --reload --host 0.0.0.0 --port $(API_PORT)

test-all: test-unit test-functional test-integration test-contracts ## Executa todos os testes
	@echo "$(GREEN)‚úÖ Todos os testes executados com sucesso!$(NC)"

test-unit: ## Executa testes unit√°rios
	@echo "$(YELLOW)üß™ Executando testes unit√°rios...$(NC)"
	$(PYTEST) tests/unit/ -v --cov=api --cov-report=html --cov-report=xml --cov-report=term-missing
	@echo "$(GREEN)‚úÖ Testes unit√°rios conclu√≠dos!$(NC)"

test-functional: ## Executa testes funcionais de API
	@echo "$(YELLOW)üîç Executando testes funcionais...$(NC)"
	$(PYTEST) tests/functional/ -v --workers=$(TEST_WORKERS) --html=docs/coverage_report/functional_report.html
	@echo "$(GREEN)‚úÖ Testes funcionais conclu√≠dos!$(NC)"

test-integration: ## Executa testes de integra√ß√£o
	@echo "$(YELLOW)üîó Executando testes de integra√ß√£o...$(NC)"
	$(PYTEST) tests/integration/ -v --html=docs/coverage_report/integration_report.html
	@echo "$(GREEN)‚úÖ Testes de integra√ß√£o conclu√≠dos!$(NC)"

test-performance: ## Executa testes de performance com Locust
	@echo "$(YELLOW)‚ö° Executando testes de performance...$(NC)"
	cd tests/performance && locust --headless --users 100 --spawn-rate 10 --run-time 60s --host http://localhost:$(API_PORT) --html ../../docs/coverage_report/performance_report.html
	@echo "$(GREEN)‚úÖ Testes de performance conclu√≠dos!$(NC)"

test-security: ## Executa testes de seguran√ßa OWASP ZAP
	@echo "$(YELLOW)üîí Executando testes de seguran√ßa...$(NC)"
	$(PYTHON) tests/security/owasp_zap_scan.py
	@echo "$(GREEN)‚úÖ Testes de seguran√ßa conclu√≠dos!$(NC)"

test-contracts: ## Valida contratos OpenAPI
	@echo "$(YELLOW)üìã Validando contratos OpenAPI...$(NC)"
	$(PYTEST) tests/contracts/ -v
	dredd contracts/health_api.yaml http://localhost:$(API_PORT)
	@echo "$(GREEN)‚úÖ Valida√ß√£o de contratos conclu√≠da!$(NC)"

coverage: ## Gera relat√≥rio de cobertura completo
	@echo "$(YELLOW)üìä Gerando relat√≥rio de cobertura...$(NC)"
	$(PYTEST) --cov=api --cov-report=html:docs/coverage_report/htmlcov --cov-report=xml:docs/coverage_report/coverage.xml --cov-report=term-missing
	@echo "$(GREEN)‚úÖ Relat√≥rio de cobertura gerado em docs/coverage_report/$(NC)"

lint: ## Executa an√°lise est√°tica de c√≥digo
	@echo "$(YELLOW)üîç Executando an√°lise est√°tica...$(NC)"
	black --check api/ tests/
	flake8 api/ tests/
	pylint api/ tests/
	bandit -r api/
	safety check
	@echo "$(GREEN)‚úÖ An√°lise est√°tica conclu√≠da!$(NC)"

format: ## Formata c√≥digo com Black
	@echo "$(YELLOW)üé® Formatando c√≥digo...$(NC)"
	black api/ tests/
	isort api/ tests/
	@echo "$(GREEN)‚úÖ C√≥digo formatado!$(NC)"

sonar: ## Executa an√°lise SonarQube local
	@echo "$(YELLOW)üìà Executando an√°lise SonarQube...$(NC)"
	sonar-scanner
	@echo "$(GREEN)‚úÖ An√°lise SonarQube conclu√≠da!$(NC)"

build: ## Build da aplica√ß√£o
	@echo "$(YELLOW)üèóÔ∏è Fazendo build da aplica√ß√£o...$(NC)"
	docker build -t healthapi-qa:latest .
	@echo "$(GREEN)‚úÖ Build conclu√≠do!$(NC)"

docker-up: ## Sobe ambiente Docker completo
	@echo "$(YELLOW)üê≥ Subindo ambiente Docker...$(NC)"
	$(DOCKER_COMPOSE) up -d
	@echo "$(GREEN)‚úÖ Ambiente Docker ativo!$(NC)"

docker-down: ## Para ambiente Docker
	@echo "$(YELLOW)üê≥ Parando ambiente Docker...$(NC)"
	$(DOCKER_COMPOSE) down
	@echo "$(GREEN)‚úÖ Ambiente Docker parado!$(NC)"

clean: ## Limpa arquivos tempor√°rios e cache
	@echo "$(YELLOW)üßπ Limpando arquivos tempor√°rios...$(NC)"
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -delete
	find . -type d -name "*.egg-info" -exec rm -rf {} +
	find . -type d -name ".pytest_cache" -exec rm -rf {} +
	rm -rf .coverage htmlcov/ .tox/ dist/ build/
	@echo "$(GREEN)‚úÖ Limpeza conclu√≠da!$(NC)"

install-hooks: ## Instala pre-commit hooks
	@echo "$(YELLOW)ü™ù Instalando pre-commit hooks...$(NC)"
	pre-commit install
	pre-commit install --hook-type commit-msg
	@echo "$(GREEN)‚úÖ Hooks instalados!$(NC)"

ci-pipeline: lint test-all test-security coverage ## Pipeline completo de CI
	@echo "$(GREEN)üéâ Pipeline de CI executado com sucesso!$(NC)"

deploy-staging: ## Deploy para ambiente de staging
	@echo "$(YELLOW)üöÄ Fazendo deploy para staging...$(NC)"
	# Adicionar comandos de deploy espec√≠ficos
	@echo "$(GREEN)‚úÖ Deploy para staging conclu√≠do!$(NC)"

deploy-prod: ## Deploy para produ√ß√£o
	@echo "$(YELLOW)üöÄ Fazendo deploy para produ√ß√£o...$(NC)"
	# Adicionar comandos de deploy espec√≠ficos
	@echo "$(GREEN)‚úÖ Deploy para produ√ß√£o conclu√≠do!$(NC)"

# Default target
.DEFAULT_GOAL := help
