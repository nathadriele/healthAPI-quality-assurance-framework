openapi: 3.0.3
info:
  title: Health API QA Framework
  description: |
    ## üè• Health API for QA Testing
    
    API completa para demonstra√ß√£o de testes automatizados em sistemas de sa√∫de.
    
    ### Funcionalidades:
    - **Pacientes**: CRUD completo de pacientes
    - **Consultas**: Agendamento e gerenciamento de consultas
    - **Monitoramento**: Health checks e m√©tricas
    
    ### Seguran√ßa:
    - Valida√ß√£o de entrada
    - Headers de seguran√ßa
    - Rate limiting
    
    ### Qualidade:
    - Testes automatizados
    - Monitoramento cont√≠nuo
    - Documenta√ß√£o OpenAPI
  version: 1.0.0
  contact:
    name: QA Engineering Team
    email: qa-team@healthapi.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8000
    description: Development server
  - url: https://api-staging.healthapi.com
    description: Staging server
  - url: https://api.healthapi.com
    description: Production server

paths:
  /:
    get:
      summary: Root endpoint
      description: Returns basic API information
      operationId: getRoot
      tags:
        - System
      responses:
        '200':
          description: API information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiInfo'
              example:
                message: "üè• Health API QA Framework"
                version: "1.0.0"
                status: "operational"
                environment: "development"
                docs_url: "/docs"
                timestamp: 1704067200.0

  /health:
    get:
      summary: Health check
      description: Returns API health status
      operationId: getHealth
      tags:
        - Monitoring
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
        '503':
          description: API is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /ready:
    get:
      summary: Readiness probe
      description: Kubernetes readiness probe
      operationId: getReadiness
      tags:
        - Monitoring
      responses:
        '200':
          description: Service is ready
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadinessStatus'

  /live:
    get:
      summary: Liveness probe
      description: Kubernetes liveness probe
      operationId: getLiveness
      tags:
        - Monitoring
      responses:
        '200':
          description: Service is alive
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LivenessStatus'

  /metrics:
    get:
      summary: System metrics
      description: Returns system performance metrics
      operationId: getMetrics
      tags:
        - Monitoring
      responses:
        '200':
          description: System metrics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemMetrics'

  /api/v1/patients:
    get:
      summary: List patients
      description: Returns a list of all patients
      operationId: getPatients
      tags:
        - Patients
      parameters:
        - name: limit
          in: query
          description: Maximum number of patients to return
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
        - name: offset
          in: query
          description: Number of patients to skip
          required: false
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: List of patients
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientsList'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create patient
      description: Creates a new patient
      operationId: createPatient
      tags:
        - Patients
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatientCreate'
            example:
              name: "Jo√£o Silva"
              age: 35
              email: "joao.silva@email.com"
              phone: "+55 11 99999-9999"
      responses:
        '200':
          description: Patient created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatientCreateResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /api/v1/appointments:
    get:
      summary: List appointments
      description: Returns a list of all appointments
      operationId: getAppointments
      tags:
        - Appointments
      parameters:
        - name: patient_id
          in: query
          description: Filter by patient ID
          required: false
          schema:
            type: integer
            minimum: 1
        - name: date
          in: query
          description: Filter by appointment date (YYYY-MM-DD)
          required: false
          schema:
            type: string
            format: date
      responses:
        '200':
          description: List of appointments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentsList'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    ApiInfo:
      type: object
      required:
        - message
        - version
        - status
        - environment
        - timestamp
      properties:
        message:
          type: string
          description: API welcome message
        version:
          type: string
          description: API version
          pattern: '^[0-9]+\.[0-9]+\.[0-9]+$'
        status:
          type: string
          enum: [operational, maintenance, deprecated]
        environment:
          type: string
          enum: [development, testing, staging, production]
        docs_url:
          type: string
          nullable: true
          description: URL for API documentation
        timestamp:
          type: number
          description: Unix timestamp

    HealthStatus:
      type: object
      required:
        - status
        - service
        - version
        - environment
        - database
        - timestamp
      properties:
        status:
          type: string
          enum: [healthy, unhealthy, degraded]
        service:
          type: string
          description: Service name
        version:
          type: string
          description: Service version
        environment:
          type: string
          enum: [development, testing, staging, production]
        database:
          type: string
          description: Database connection status
        timestamp:
          type: number
          description: Unix timestamp
        uptime:
          type: number
          description: Service uptime in seconds

    ReadinessStatus:
      type: object
      required:
        - status
        - service
        - timestamp
      properties:
        status:
          type: string
          enum: [ready, not_ready]
        service:
          type: string
        timestamp:
          type: number

    LivenessStatus:
      type: object
      required:
        - status
        - service
        - timestamp
      properties:
        status:
          type: string
          enum: [alive, dead]
        service:
          type: string
        timestamp:
          type: number

    SystemMetrics:
      type: object
      required:
        - http_requests_total
        - http_request_duration_seconds
        - database_connections_active
        - memory_usage_bytes
      properties:
        http_requests_total:
          type: integer
          minimum: 0
        http_request_duration_seconds:
          type: number
          minimum: 0
        database_connections_active:
          type: integer
          minimum: 0
        memory_usage_bytes:
          type: integer
          minimum: 0

    Patient:
      type: object
      required:
        - id
        - name
        - age
        - email
      properties:
        id:
          type: integer
          minimum: 1
          description: Unique patient identifier
        name:
          type: string
          minLength: 1
          maxLength: 100
          description: Patient full name
        age:
          type: integer
          minimum: 0
          maximum: 150
          description: Patient age in years
        email:
          type: string
          format: email
          maxLength: 255
          description: Patient email address
        phone:
          type: string
          maxLength: 20
          description: Patient phone number
          nullable: true

    PatientCreate:
      type: object
      required:
        - name
        - age
        - email
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        age:
          type: integer
          minimum: 0
          maximum: 150
        email:
          type: string
          format: email
          maxLength: 255
        phone:
          type: string
          maxLength: 20
          nullable: true

    PatientsList:
      type: object
      required:
        - patients
        - total
      properties:
        patients:
          type: array
          items:
            $ref: '#/components/schemas/Patient'
        total:
          type: integer
          minimum: 0
          description: Total number of patients

    PatientCreateResponse:
      type: object
      required:
        - message
        - patient
      properties:
        message:
          type: string
          description: Success message
        patient:
          $ref: '#/components/schemas/Patient'

    Appointment:
      type: object
      required:
        - id
        - patient_id
        - doctor
        - date
        - time
      properties:
        id:
          type: integer
          minimum: 1
        patient_id:
          type: integer
          minimum: 1
        doctor:
          type: string
          minLength: 1
          maxLength: 100
        date:
          type: string
          format: date
        time:
          type: string
          pattern: '^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$'
        duration:
          type: integer
          minimum: 15
          maximum: 240
          description: Duration in minutes
          nullable: true
        notes:
          type: string
          maxLength: 500
          nullable: true

    AppointmentsList:
      type: object
      required:
        - appointments
        - total
      properties:
        appointments:
          type: array
          items:
            $ref: '#/components/schemas/Appointment'
        total:
          type: integer
          minimum: 0

    ErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          type: object
          required:
            - code
            - message
            - timestamp
          properties:
            code:
              type: integer
              minimum: 400
              maximum: 599
            message:
              type: string
            timestamp:
              type: number
            details:
              type: string
              nullable: true

    ValidationError:
      type: object
      required:
        - detail
      properties:
        detail:
          type: array
          items:
            type: object
            required:
              - loc
              - msg
              - type
            properties:
              loc:
                type: array
                items:
                  oneOf:
                    - type: string
                    - type: integer
              msg:
                type: string
              type:
                type: string

tags:
  - name: System
    description: System information endpoints
  - name: Monitoring
    description: Health checks and monitoring
  - name: Patients
    description: Patient management
  - name: Appointments
    description: Appointment management
